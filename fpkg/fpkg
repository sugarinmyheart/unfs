#!/bin/sh 
#set -x

parameter_count=$#
parameter_first=$1
parameter_second=$2
config_file="/etc/config/fpkg"
application_unzip_tmp_path="/tmp/fpkg/"
list_path=${application_path}"fpkg.list"
lock_file="/tmp/fpkg.lock"

#插件相关信息
plugin_ID=
plugin_Name=
plugin_VersionName=
plugin_VersionCode=
plugin_XPKGVersion=
plugin_IntallPath=
plugin_MD5=
plugin_Author=
plugin_Largeicon=
plugin_Smallicon=
plugin_type=
plugin_Autorun=0
default_Largeicon="/opt/app/defalut/icon/large.png"
default_Smallicon="/opt/app/defalut/icon/small.png"


#检查参数是否正确
check_parameter()
{
	if [ ${parameter_count} -ne 2 ];then
		echo "Fail:Parameter Error!"
		exit 1
	fi
}

#初始化
fpkg_init()
{
	touch ${config_file}
	if [ ! -d "${application_unzip_tmp_path}" ];then
		mkdir -p ${application_unzip_tmp_path}
	fi
}

#lock
fpkg_lock()
{
	touch ${lock_file}
}

#unlick
fpkg_unlock()
{
	rm ${lock_file}
}

#判断是不是标准的opwnert安装包
fpkg_verified_openwrt_package()
{
	local package=${parameter_second}
	local tmp=`tar -tzf ${package} | grep debian-binary`
	if [ "${tmp}x" != "x" ];then
		if [ "${package##*.}" == "ipk" ];then
			plugin_type="openwrt"
		fi
	fi
}

#判断是不是如意云插件包
fpkg_verified_xcloud_pacakge()
{
	local package=${parameter_second}
	local tmp=`tar -tzf ${package} | grep appinfo`
	if [ "${tmp}x" != "x" ];then
		if [ "${package##*.}" == "xipk" ];then
			plugin_type="xcloud"
		fi
	fi
}

#检查安装包是否正确
fpkg_check()
{
	#过滤规则
	fpkg_verified_openwrt_package
	fpkg_verified_xcloud_pacakge	
}

#安装openwrt标准插件
fpkg_install_openwrt_package()
{
	local package=${parameter_second}
	local current_dir=${PWD}
	local value
	tar xzvf ${package} -C ${application_unzip_tmp_path}
	tar xzvf ${application_unzip_tmp_path}/control.tar.gz -C ${application_unzip_tmp_path}
	#获取配置文件各项参数
	while read line
	do
		#plugin_Name
		value=`echo $line | grep Package`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#Package} | tr -d " " | tr -d ":"`
			plugin_Name=$value
		fi
		#plugin_VersionName
		value=`echo $line | grep Version`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#Version} | tr -d " " | tr -d ":"`
			plugin_VersionName=$value
		fi
	done < ${application_unzip_tmp_path}control
	plugin_Largeicon=${default_Largeicon}
	plugin_Smallicon=${default_Smallicon}

	#install
	fpkg_check_config && opkg install ${package} && fpkg_save_config
	
	#clean
	rm ${application_unzip_tmp_path}/* -rf
}

#安装如意云插件
fpkg_install_xcloud_package()
{
	local package=${parameter_second}
	local value
	tar xzvf ${package} -C ${application_unzip_tmp_path}
	cd ${application_unzip_tmp_path}
	local dir_name=`ls`
	cd ${dir_name}
	#获取配置文件各项参数
	while read line
	do
		#plugin_ID
		value=`echo $line | grep plugin_ID`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_ID} | tr -d " " | tr -d ":"`
			plugin_ID=$value
		fi

		#plugin_Name
		value=`echo $line | grep plugin_Name`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_Name} | tr -d " " | tr -d ":"`
			plugin_Name=$value
		fi

		#plugin_VersionName
		value=`echo $line | grep plugin_VersionName`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_VersionName} | tr -d " " | tr -d ":"`
			plugin_VersionName=$value
		fi

		#plugin_VersionCode
		value=`echo $line | grep plugin_VersionCode`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_VersionCode} | tr -d " " | tr -d ":"`
			plugin_VersionCode=$value
		fi

		#plugin_XPKGVersion
		value=`echo $line | grep plugin_XPKGVersion`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_XPKGVersion} | tr -d " " | tr -d ":"`
			plugin_XPKGVersion=$value
		fi

		#plugin_IntallPath
		value=`echo $line | grep plugin_IntallPath`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_IntallPath} | tr -d " " | tr -d ":"`
			plugin_IntallPath=$value
		fi

		#plugin_Author
		value=`echo $line | grep plugin_Author`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_Author} | tr -d " " | tr -d ":"`
			plugin_Author=$value
		fi
		
		#plugin_MD5
		value=`echo $line | grep plugin_MD5`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_MD5} | tr -d " " | tr -d ":"`
			plugin_MD5=$value
		fi

		#plugin_Largeicon
		value=`echo $line | grep plugin_Largeicon`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_Largeicon} | tr -d " " | tr -d ":"`
			plugin_Largeicon=$value
		fi
		
		#plugin_Smallicon
		value=`echo $line | grep plugin_Smallicon`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_Smallicon} | tr -d " " | tr -d ":"`
			plugin_Smallicon=$value
		fi

		#plugin_Autorun
		value=`echo $line | grep plugin_Autorun`
		if [ "${value}x" != "x" ];then
			value=`echo ${value#plugin_Autorun} | tr -d " " | tr -d ":"`
			plugin_Autorun=$value
		fi

	done < ./appinfo
	
	#校验
	local md5=`ls *.ipk | xargs md5sum | awk -F " " '{print $1}'`
	if [ "${md5}x" != "${plugin_MD5}x" ];then
		echo "Package is broken!"
		exit 1
	fi

	#执行安装脚本
	fpkg_check_config 
	local rv=`sh ./appshell install`
	local success=`echo $rv | grep Success`
	if [ "${success}x" == "x" ];then
		local fail=`echo $rv | grep "Install Error"`
		if [ "${fail}x" != "x" ];then
			echo "Install Error"
			sh ${plugin_IntallPath}appshell uninstall
			exit 1
		fi
	fi

	if [ ! -f "${plugin_Largeicon}" ];then
		plugin_Largeicon=${default_Largeicon}
	fi
	if [ ! -f "${plugin_Smallicon}" ];then
		plugin_Smallicon=${default_Smallicon}
	fi	

	#保存配置
	fpkg_save_config
	
	#clean
	rm ${application_unzip_tmp_path}/* -rf
}

#panduan
fpkg_check_config()
{
	local config_plugin_name=`basename ${parameter_second} | awk -F "." '{print $1}'`
	local is_install=`uci show fpkg | grep "${config_plugin_name}=globals"`
	if [ "${is_install}x" != "x" ];then
		echo "${plugin_Name} had installed !"
		exit 1
	fi
}

#保存配置文件
fpkg_save_config()
{
	local config_plugin_name=`basename ${parameter_second} | awk -F "." '{print $1}'`
	uci set fpkg.${config_plugin_name}=globals
	uci set fpkg.${config_plugin_name}.plugin_ID=${plugin_ID}
	uci set fpkg.${config_plugin_name}.plugin_Name=${plugin_Name}
	uci set fpkg.${config_plugin_name}.plugin_VersionName=${plugin_VersionName}
	uci set fpkg.${config_plugin_name}.plugin_VersionCode=${plugin_VersionCode}
	uci set fpkg.${config_plugin_name}.plugin_IntallPath=${plugin_IntallPath}
	uci set fpkg.${config_plugin_name}.plugin_Author=${plugin_Author}
	uci set fpkg.${config_plugin_name}.plugin_Largeicon=${plugin_Largeicon}
	uci set fpkg.${config_plugin_name}.plugin_Smallicon=${plugin_Smallicon}
	uci set fpkg.${config_plugin_name}.plugin_Type=${plugin_type}
	uci set fpkg.${config_plugin_name}.plugin_Autorun=${plugin_Autorun}
	uci commit
}

#安装
fpkg_install()
{
	local type
	fpkg_check
	type=$plugin_type
	if [ "${type}x" == "xcloudx" ];then
		fpkg_install_xcloud_package
	elif [ "${type}x" == "openwrtx" ];then
		fpkg_install_openwrt_package
	fi
}

#删除配置
fpkg_remove_config()
{
	local p1=$1
	local config_plugin_name=`basename $p1 | awk -F "." '{print $1}'`
	uci delete fpkg.${config_plugin_name}
	uci commit
}

#卸载
fpkg_remove()
{
	local plugin=`basename ${parameter_second} | awk -F "." '{print $1}'`
	local type=`uci get fpkg.${plugin}.plugin_Type`	
	if [ "${type}x" == "xcloudx" ];then
		local plugin_IntallPath=`uci get fpkg.${plugin}.plugin_IntallPath`
		sh ${plugin_IntallPath}appshell uninstall
	elif [ "${type}x" == "openwrtx" ];then
		opkg remove ${plugin}
	else
		exit 1
	fi
	
	fpkg_remove_config $plugin
}

main()
{
	check_parameter
	fpkg_init
	if [ "${parameter_first}x" == "installx" ];then
		fpkg_install
	elif [ "${parameter_first}x" == "removex" ];then
		fpkg_remove
	else
		exit 1
	fi
}

main

